{
    "id": "5322070516fada05",
    "slug": "five-minute-introduction",
    "trashed": false,
    "description": "",
    "likes": 266,
    "publish_level": "live_unlisted",
    "forks": 70,
    "fork_of": null,
    "has_importers": true,
    "update_time": "2022-03-12T00:27:34.656Z",
    "first_public_version": 426,
    "paused_version": null,
    "publish_time": "2022-12-15T17:31:07.842Z",
    "publish_version": 426,
    "latest_version": 426,
    "thumbnail": "9c4975bf28df38f7088f1af89a53650337989c085116a20a2342058c6ebffee9",
    "default_thumbnail": "2e7d2cb5c140f9292883809f3110278fe006558a6606c3a67c961906fb4bd332",
    "roles": [],
    "sharing": null,
    "owner": {
        "id": "f35c755083683fe5",
        "avatar_url": "https://avatars.observableusercontent.com/avatar/5a51c3b908225a581d20577e488e2aba8cbc9541c52982c638638c370c3e5e8e",
        "login": "observablehq",
        "name": "Observable",
        "bio": "Use data to think, together.",
        "home_url": "https://observablehq.com",
        "type": "team",
        "tier": "enterprise_2024"
    },
    "creator": {
        "id": "074c414ad1d825f5",
        "github_login": "mbostock",
        "avatar_url": "https://avatars.observableusercontent.com/avatar/82811927da99f8938001b2ef1f552ad2c47083e46ebc55a3a146a5a5848c4519",
        "login": "mbostock",
        "name": "Mike Bostock",
        "bio": "Visualization toolmaker. Co-founder @observablehq. Creator @d3. Former @nytgraphics. Pronounced BOSS-tock.",
        "home_url": "https://bost.ocks.org/mike/",
        "tier": "pro"
    },
    "authors": [],
    "collections": [],
    "files": [],
    "comments": [
        {
            "id": "b16b6de9f74ebcb3",
            "content": "hello",
            "node_id": 5,
            "create_time": "2020-08-27T10:47:25.221Z",
            "update_time": null,
            "resolved": true,
            "user": {
                "id": "282c6db1fed9f106",
                "avatar_url": "https://avatars.observableusercontent.com/avatar/8b404900a4a63953df24690fb00a07c771079dcbce801c1bfd1acc9b7d6ac3b7",
                "login": "qiujiahong",
                "name": "Nick Qiu",
                "bio": "",
                "home_url": "",
                "tier": "public",
                "github_login": "qiujiahong"
            }
        },
        {
            "id": "bfbbeed1c30a29ae",
            "content": "üëãüèº",
            "node_id": 5,
            "create_time": "2020-08-27T16:36:28.070Z",
            "update_time": null,
            "resolved": true,
            "user": {
                "id": "dbf69c13a14d2f62",
                "avatar_url": "https://avatars.observableusercontent.com/avatar/b847c4c49993b1df7599d355f47dc0ad9c2dcf43439ce9e8f3410e6368b3aac9",
                "login": "visnup",
                "name": "Visnu Pitiyanuvath",
                "bio": "",
                "home_url": "https://twitter.com/visnup",
                "tier": "pro",
                "github_login": "visnup"
            }
        },
        {
            "id": "5892a3ba90e47eea",
            "content": "Testing",
            "node_id": 5,
            "create_time": "2020-09-11T14:53:48.430Z",
            "update_time": null,
            "resolved": true,
            "user": {
                "id": "2d99d9fe9917c378",
                "avatar_url": "https://avatars.observableusercontent.com/avatar/e9e8dfa896945e8791c7bf1efb5f2260f7e5e9366aee32f771d408ded15a2af6",
                "login": "fskatep",
                "name": "Nobuhle Mazibuko",
                "bio": "",
                "home_url": "http://www.nobztech.co.za",
                "tier": "public",
                "github_login": "FSkateP"
            }
        },
        {
            "id": "65bb2cc078efc03a",
            "content": "Test",
            "node_id": 5,
            "create_time": "2020-10-13T20:12:08.077Z",
            "update_time": null,
            "resolved": true,
            "user": {
                "id": "68b5f9ff663b7dbb",
                "avatar_url": "https://avatars.observableusercontent.com/avatar/3c90533f3341e8941aec62f06e34ee5f253398f3d59c9ce68bc13c7357a67fbf",
                "login": "vghaderi",
                "name": "Vahid Ghaderi",
                "bio": "",
                "home_url": "",
                "tier": "public",
                "github_login": null
            }
        },
        {
            "id": "7bce6b211579d699",
            "content": "test",
            "node_id": 5,
            "create_time": "2020-10-27T02:42:35.558Z",
            "update_time": null,
            "resolved": true,
            "user": {
                "id": "c70f9b20103e4b8c",
                "avatar_url": "https://avatars.observableusercontent.com/avatar/0cbf12be952e427ef02d1e322c775fd0d89295e58922eaf6eee06f46279746ff",
                "login": "nico1988",
                "name": "nico",
                "bio": "everything is always impossible until someone does it",
                "home_url": "http://ccsunny.cn",
                "tier": "public",
                "github_login": "nico1988"
            }
        },
        {
            "id": "afa75bf2a748aad4",
            "content": "cool",
            "node_id": 5,
            "create_time": "2020-10-30T21:51:26.826Z",
            "update_time": null,
            "resolved": true,
            "user": {
                "id": "107125a3cc3157e9",
                "avatar_url": "https://avatars.observableusercontent.com/avatar/61c0fd4190ca328f841434ef0de0f283fd2aa6e4923682cc8e02969bfa32fbe5",
                "login": "bagaski",
                "name": "Bagaski",
                "bio": "design ** front-end development ** creative coding ** sound **",
                "home_url": "",
                "tier": "public",
                "github_login": "bagaski"
            }
        },
        {
            "id": "a37a3f3d0a91c1d2",
            "content": "good",
            "node_id": 5,
            "create_time": "2021-05-13T07:09:21.358Z",
            "update_time": null,
            "resolved": true,
            "user": {
                "id": "bc29f9d8f3a1340c",
                "avatar_url": "https://avatars.observableusercontent.com/avatar/e7d4b6236abfab6c4af35116f89ef99d1e153f823863a9b3322314ac9789642e",
                "login": "ankush462",
                "name": "",
                "bio": "",
                "home_url": "",
                "tier": "public",
                "github_login": "ankush462"
            }
        },
        {
            "id": "8af33fa03940218a",
            "content": "Hello test",
            "node_id": 5,
            "create_time": "2021-06-07T15:29:03.856Z",
            "update_time": null,
            "resolved": true,
            "user": {
                "id": "ce41b70cad70a493",
                "avatar_url": "https://avatars.observableusercontent.com/avatar/d35a85e9410f1c4748acd796649cb7e94fab615b965b9ac09b3b213d6a10622a",
                "login": "liseypanda",
                "name": "",
                "bio": "",
                "home_url": "",
                "tier": "public",
                "github_login": "liseyPanda"
            }
        },
        {
            "id": "d3c148918fd9aa4e",
            "content": "fresh bird",
            "node_id": 5,
            "create_time": "2021-07-14T07:21:43.894Z",
            "update_time": null,
            "resolved": true,
            "user": {
                "id": "28f8f231ede25732",
                "avatar_url": "https://avatars.observableusercontent.com/avatar/042345866d436c1ab48da0b745483aab0283df5fb5bfc0924b63064e051e48de",
                "login": "lxmbetterman",
                "name": "Â∏ÖÁöÑÊµÅÊ≤πÁöÑËµñÂ∏Ö",
                "bio": "‰∏ñ‰∏äÊó†Èöæ‰∫ãÔºåÂè™ÊÄïÊúâÂøÉ‰∫∫",
                "home_url": "",
                "tier": "public",
                "github_login": "lxmbetterman"
            }
        },
        {
            "id": "793036d05dfab59d",
            "content": "j",
            "node_id": 15,
            "create_time": "2020-10-23T00:22:25.998Z",
            "update_time": null,
            "resolved": true,
            "user": {
                "id": "966176ba672cb8e8",
                "avatar_url": "https://avatars.observableusercontent.com/avatar/615711dace1c53215f11bb19f43a909a58d099087c5bd3fb04ef82432a788277",
                "login": "lucianotrujillo",
                "name": "",
                "bio": "Let's code baby",
                "home_url": "",
                "tier": "public",
                "github_login": "LucianoTrujillo"
            }
        },
        {
            "id": "6b40d7a509ffaa88",
            "content": "Loving it so far!",
            "node_id": 31,
            "create_time": "2021-03-06T06:36:02.989Z",
            "update_time": null,
            "resolved": true,
            "user": {
                "id": "9bae6f76f3660752",
                "avatar_url": "https://avatars.githubusercontent.com/u/1017909?v=4",
                "login": "jessebrack",
                "name": "Jesse Brack",
                "bio": "",
                "home_url": "http://www.jessebrack.dev/",
                "tier": "public",
                "github_login": "jessebrack"
            }
        },
        {
            "id": "5045478c4feb32de",
            "content": "Is this ok?",
            "node_id": 248,
            "create_time": "2022-03-12T14:54:35.225Z",
            "update_time": null,
            "resolved": false,
            "user": {
                "id": "c454621e13d910d3",
                "avatar_url": "https://avatars.observableusercontent.com/avatar/665b28399b8c69493837e25bfd6b1e60e5c83f5f646e274cf39b5146449e30c6",
                "login": "dvd101x",
                "name": "David",
                "bio": "I'm a Mechanical Engineer.\r\nI do Mechanical Design, Simulation, 3D Printing, Teaching and numerical programming in GNU Octave, Python and JavaScript.",
                "home_url": "",
                "tier": "public",
                "github_login": "dvd101x"
            }
        },
        {
            "id": "b3aabd795be88198",
            "content": "Hm, it's probably not clear, but the intention is for readers to create a rectangular selection in the scatter plot above and see the cars array here update. Is that what you mean?",
            "node_id": 248,
            "create_time": "2022-08-24T19:22:53.152Z",
            "update_time": null,
            "resolved": false,
            "user": {
                "id": "dbf69c13a14d2f62",
                "avatar_url": "https://avatars.observableusercontent.com/avatar/b847c4c49993b1df7599d355f47dc0ad9c2dcf43439ce9e8f3410e6368b3aac9",
                "login": "visnup",
                "name": "Visnu Pitiyanuvath",
                "bio": "",
                "home_url": "https://twitter.com/visnup",
                "tier": "pro",
                "github_login": "visnup"
            }
        }
    ],
    "commenting_lock": null,
    "suggestion_from": null,
    "suggestions_to": [],
    "version": 426,
    "title": "Five-Minute Introduction",
    "license": null,
    "copyright": "",
    "nodes": [
        {
            "id": "tmp-0",
            "name": "",
            "value": "import {select, slider} from \"@jashkenas/inputs\"\r\n\r\nfunction graphFunction(hc) {\r\n    const d = {};\r\n    d.points = [];\r\n    // try {\r\n    //     d.selected = data.selected;\r\n    // } catch(err) {\r\n        d.selected = 0;\r\n    // }\r\n    for (let x = minOutdoorTemperature; x <= targetTemperature; x = x + 0.02) {\r\n        // var y = targetTemperature + (2.8 * hc**0.8) * (targetTemperature - x)**0.75;\r\n        var y = 2.55 * (hc * (targetTemperature - x))**0.78 + targetTemperature;\r\n        d.points.push([x, y])\r\n    }\r\n    return d;\r\n}\r\n\r\nviewof heatCurve = slider({\r\n    title: 'Heat Curve',\r\n    value: 0.6,\r\n    min: 0.1,\r\n    max: 4.0,\r\n    step: 0.05\r\n})\r\n\r\nviewof targetTemperature = slider({\r\n    title: 'Target Temperature',\r\n    value: 20.0,\r\n    min: 10.0,\r\n    max: 30.0,\r\n    step: 0.5\r\n})\r\n\r\nviewof maxFlowTemperature = slider({\r\n    title: 'Max Flow Temperature',\r\n    value: 35.0,\r\n    min: 15.0,\r\n    max: 90.0,\r\n    step: 5.0\r\n})\r\n\r\nviewof minOutdoorTemperature = slider({\r\n    title: 'Min Outdoor Temperature',\r\n    value: 0.0,\r\n    min: -20.0,\r\n    max: 20.0,\r\n    step: 1.0\r\n})\r\n\r\nchart = {\r\n\r\n    const width = 860;\r\n    const height = 660;\r\n    const marginTop = 20;\r\n    const marginRight = 20;\r\n    const marginBottom = 40;\r\n    const marginLeft = 40;\r\n\r\n    const xDomain = [targetTemperature, minOutdoorTemperature];\r\n    const yDomain = [targetTemperature, maxFlowTemperature];\r\n    const xScale = d3.scaleLinear().domain(xDomain).range([marginLeft, width - marginRight]);\r\n    const yScale = d3.scaleLinear().domain(yDomain).range([height - marginBottom, marginTop]);\r\n    const xAxis = d3.axisBottom(xScale).ticks(width / 80);\r\n    const yAxis = d3.axisLeft(yScale).ticks(height / 40);\r\n\r\n    const line = d3.line().x(d => xScale(d[0])).y(d => yScale(d[1]));\r\n\r\n    const svg = d3.create(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n        .on(\"pointerenter pointermove\", pointermoved)\r\n        .on(\"pointerleave\", pointerleft)\r\n        .on(\"click\", toggleActive)\r\n        .on(\"touchstart\", event => event.preventDefault());\r\n\r\n    var data = graphFunction(heatCurve);\r\n\r\n    svg.append(\"g\")\r\n        .attr(\"transform\", `translate(0,${height - marginBottom})`)\r\n        .call(xAxis)\r\n        .call(g => g.selectAll(\".tick line\").clone().attr(\"y2\", 0 - height + marginTop + marginBottom).attr(\"stroke-opacity\", 0.1))\r\n        .call(g => g.append(\"text\").attr(\"x\", width).attr(\"y\", 30).attr(\"fill\", \"currentColor\").attr(\"text-anchor\", \"end\").text(\"Outdoor temperature\"));\r\n\r\n    svg.append(\"g\")\r\n        .attr(\"transform\", `translate(${marginLeft},0)`)\r\n        .call(yAxis)\r\n        .call(g => g.selectAll(\".tick line\").clone().attr(\"x2\", width - marginLeft - marginRight).attr(\"stroke-opacity\", 0.1))\r\n        .call(g => g.append(\"text\").attr(\"x\", -marginLeft).attr(\"y\", 10).attr(\"fill\", \"currentColor\").attr(\"text-anchor\", \"start\").text(\"Flow Temperature\"));\r\n\r\n    svg.append('g').append('text').attr(\"fill\", \"currentColor\").attr('x', width - marginRight-10).attr('y', 50).attr(\"text-anchor\", \"end\").attr(\"font-size\", \"2em\").attr(\"font-style\", \"italic\").text(\"HC = \" + heatCurve);\r\n\r\n    svg.append(\"defs\").append(\"svg:clipPath\")\r\n        .attr(\"id\", \"clip\")\r\n        .append(\"svg:rect\")\r\n        .attr(\"width\", width - marginLeft - marginRight)\r\n        .attr(\"height\", height - marginBottom - marginTop)\r\n        .attr(\"x\", marginLeft)\r\n        .attr(\"y\", marginTop);\r\n\r\n    svg.append(\"path\")\r\n        .datum(data.points)\r\n        .attr(\"clip-path\", \"url(#clip)\")\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", \"steelblue\")\r\n        .attr(\"stroke-width\", 1.5)\r\n        .attr(\"d\", line);\r\n\r\n    var active = true;\r\n\r\n    var focus = svg.append('g');\r\n    focus.append('line').attr('id', 'focusLineX').attr('stroke', 'steelblue').attr('stroke-width', '0.5px');\r\n    focus.append('line').attr('id', 'focusLineY').attr('stroke', 'steelblue').attr('stroke-width', '0.5px');\r\n    focus.append('circle').attr('id', 'focusCircle').attr('r', 5).attr('fill', 'steelblue');\r\n    focus.append(\"text\").attr('id', 'focusTexty').attr(\"fill\", \"currentColor\").attr(\"x\", 9).attr(\"dy\", \".35em\");\r\n    focus.append(\"text\").attr('id', 'focusTextx').attr(\"fill\", \"currentColor\").attr(\"x\", 9).attr(\"dy\", \".35em\");\r\n\r\n    var bisectX = d3.bisector(function(d) { return d[0]; }).left;\r\n    function focusPoint() {\r\n        var d = data.points[data.selected];\r\n        var cx = xScale(d[0]), cy = yScale(d[1]);\r\n        var MIN = 0, MAX = 1;\r\n        focus.select('#focusCircle').attr('cx', cx).attr('cy', cy);\r\n        focus.select('#focusLineX').attr('x1', cx).attr('y1', yScale(yDomain[MIN])).attr('x2', cx).attr('y2', yScale(yDomain[MAX]));\r\n        focus.select('#focusLineY').attr('x1', xScale(xDomain[MIN])).attr('y1', cy).attr('x2', xScale(xDomain[MAX])).attr('y2', cy);\r\n        focus.select(\"#focusTexty\").attr(\"transform\", \"translate(\" + xScale(xDomain[MIN]) + \",\" + (cy - 10) + \")\").text(d[1].toFixed(1));\r\n        focus.select(\"#focusTextx\").attr(\"transform\", \"translate(\" + cx + \",\" + (yScale(yDomain[MIN]) - 10) + \")\").text(d[0].toFixed(1));\r\n    }\r\n\r\n    function pointermoved(event) {\r\n        if (active) {\r\n            data.selected = bisectX(data.points, xScale.invert(d3.pointer(event)[0]))\r\n            focusPoint();\r\n        }\r\n    }\r\n    function pointerleft() { }\r\n    function toggleActive() {\r\n        active = !active;\r\n    }\r\n\r\n    return svg.node();\r\n}",
            "mode": "js",
            "outputs": []
        }
    ],
    "resolutions": [],
    "schedule": null,
    "last_view_time": null
}